// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  bio       String?
  phone     String?
  password  String?  // For credential-based authentication
  verified  Boolean  @default(false)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  accounts Account[]
  sessions Session[]

  // User activities
  experiences     Experience[]
  bookings        Booking[]
  reviews         Review[]
  challengeUsers  ChallengeUser[]
  notifications   Notification[]
  rewards         Reward[]
  hostProfile     HostProfile?
  
  // Organization and admin relationships
  organizationMemberships OrganizationMember[]
  adminLogs       AdminLog[]

  // Social networking features
  socialProfile   SocialProfile?
  following       UserConnection[] @relation("UserFollowing")
  followers       UserConnection[] @relation("UserFollowers")
  sentMessages    Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  posts           SocialPost[]
  postLikes       PostLike[]
  postComments    PostComment[]
  storyEntries    StoryEntry[]
  groupMemberships GroupMember[]
  createdGroups   Group[] @relation("GroupCreator")
  userContent     UserGeneratedContent[]
  aiInteractions  AIInteraction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model HostProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  verified    Boolean  @default(false)
  rating      Float    @default(0)
  totalReviews Int     @default(0)
  totalEarnings Float  @default(0)
  description String?
  languages   String?  // JSON array as string
  responseTime Int?    // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("host_profiles")
}

model Experience {
  id              String            @id @default(cuid())
  title           String
  description     String
  shortDescription String?
  price           Float
  duration        Int               // in minutes
  maxParticipants Int
  category        ExperienceCategory
  difficulty      DifficultyLevel
  location        String
  latitude        Float?
  longitude       Float?
  images          String?  // JSON array as string
  included        String?  // JSON array as string
  requirements    String?  // JSON array as string
  cancellationPolicy String?
  status          ExperienceStatus @default(DRAFT)
  featured        Boolean          @default(false)
  rating          Float            @default(0)
  totalReviews    Int              @default(0)
  totalBookings   Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  hostId   String
  host     User   @relation(fields: [hostId], references: [id])

  bookings         Booking[]
  reviews          Review[]
  availabilities   Availability[]
  challengeExperiences ChallengeExperience[]

  @@map("experiences")
}

model Availability {
  id           String   @id @default(cuid())
  experienceId String
  date         DateTime
  startTime    String
  endTime      String
  available    Boolean  @default(true)
  maxBookings  Int      @default(1)
  currentBookings Int   @default(0)
  createdAt    DateTime @default(now())

  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@unique([experienceId, date, startTime])
  @@map("availabilities")
}

model Booking {
  id              String        @id @default(cuid())
  experienceId    String
  userId          String
  date            DateTime
  startTime       String
  endTime         String
  participants    Int
  totalAmount     Float
  platformFee     Float
  hostEarnings    Float
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String?
  specialRequests String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  experience Experience @relation(fields: [experienceId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  payment    Payment?
  review     Review?
  organizationBooking OrganizationBooking?

  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  amount          Float
  currency        String        @default("USD")
  paymentMethod   PaymentMethod
  stripePaymentId String?
  status          PaymentStatus @default(PENDING)
  processedAt     DateTime?
  refundedAt      DateTime?
  refundAmount    Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  userId     String
  experienceId String
  rating     Int      // 1-5
  comment    String?
  images     String?  // JSON array as string
  helpful    Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  booking    Booking    @relation(fields: [bookingId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  experience Experience @relation(fields: [experienceId], references: [id])

  @@map("reviews")
}

model Challenge {
  id          String            @id @default(cuid())
  title       String
  description String
  image       String?
  type        ChallengeType
  difficulty  DifficultyLevel
  points      Int
  badge       String?
  startDate   DateTime
  endDate     DateTime
  status      ChallengeStatus   @default(ACTIVE)
  requirements Json             // Flexible requirements structure
  isPublic    Boolean           @default(true)
  creatorId   String?           // For user-created challenges
  leaderboard Json?             // Challenge leaderboard data
  liveUpdates Boolean           @default(false)
  mediaUploads Boolean          @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  challengeUsers       ChallengeUser[]
  challengeExperiences ChallengeExperience[]
  groupChallenges      GroupChallenge[]

  @@map("challenges")
}

model ChallengeUser {
  id          String            @id @default(cuid())
  userId      String
  challengeId String
  status      ChallengeUserStatus @default(IN_PROGRESS)
  progress    Int               @default(0) // percentage
  completedAt DateTime?
  pointsEarned Int              @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  challenge Challenge @relation(fields: [challengeId], references: [id])

  @@unique([userId, challengeId])
  @@map("challenge_users")
}

model ChallengeExperience {
  id           String @id @default(cuid())
  challengeId  String
  experienceId String
  pointsValue  Int    @default(0)

  challenge  Challenge  @relation(fields: [challengeId], references: [id])
  experience Experience @relation(fields: [experienceId], references: [id])

  @@unique([challengeId, experienceId])
  @@map("challenge_experiences")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data for the notification
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Reward {
  id          String     @id @default(cuid())
  userId      String
  type        RewardType
  title       String
  description String?
  points      Int
  badge       String?
  earnedAt    DateTime   @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("rewards")
}

// Organization and Enterprise Models
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  industry    String?
  size        OrganizationSize?
  plan        SubscriptionPlan @default(FREE)
  status      OrganizationStatus @default(ACTIVE)
  settings    Json?    // Custom organization settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members     OrganizationMember[]
  bookings    OrganizationBooking[]
  analytics   OrganizationAnalytics[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  permissions    Json?            // Custom permissions
  joinedAt       DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model OrganizationBooking {
  id             String   @id @default(cuid())
  organizationId String
  bookingId      String   @unique
  department     String?
  costCenter     String?
  approvedBy     String?
  notes          String?
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  booking      Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("organization_bookings")
}

model OrganizationAnalytics {
  id             String   @id @default(cuid())
  organizationId String
  date           DateTime
  totalBookings  Int      @default(0)
  totalSpent     Float    @default(0)
  activeMembers  Int      @default(0)
  metrics        Json?    // Additional metrics
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, date])
  @@map("organization_analytics")
}

model AdminLog {
  id        String    @id @default(cuid())
  adminId   String
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())

  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

model SystemAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalUsers      Int      @default(0)
  totalHosts      Int      @default(0)
  totalExperiences Int     @default(0)
  totalBookings   Int      @default(0)
  totalRevenue    Float    @default(0)
  platformFees    Float    @default(0)
  activeUsers     Int      @default(0)
  newSignups      Int      @default(0)
  metrics         Json?    // Additional daily metrics
  createdAt       DateTime @default(now())

  @@map("system_analytics")
}

// Enums
enum UserRole {
  USER
  HOST
  ADMIN
  SUPER_ADMIN
}

enum OrganizationRole {
  MEMBER
  ADMIN
  OWNER
}

enum OrganizationSize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum SubscriptionPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum OrganizationStatus {
  ACTIVE
  SUSPENDED
  PENDING
  CANCELLED
}

enum ExperienceCategory {
  ADVENTURE
  CULTURE
  FOOD
  NATURE
  SPORTS
  ARTS
  TECHNOLOGY
  WELLNESS
  EDUCATION
  ENTERTAINMENT
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ExperienceStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  PAUSED
  REJECTED
  ARCHIVED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
}

enum ChallengeType {
  EXPERIENCE_COUNT
  CATEGORY_EXPLORATION
  POINTS_ACCUMULATION
  STREAK
  SOCIAL
  SEASONAL
}

enum ChallengeStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ChallengeUserStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  EXPERIENCE_REMINDER
  REVIEW_REQUEST
  CHALLENGE_COMPLETED
  REWARD_EARNED
  PAYMENT_RECEIVED
  MESSAGE
  SYSTEM
}

enum RewardType {
  POINTS
  BADGE
  DISCOUNT
  FREE_EXPERIENCE
  EARLY_ACCESS
}

// Social Networking Models
model SocialProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  username        String   @unique
  displayName     String?
  coverPhoto      String?
  location        String?
  website         String?
  interests       String?  // JSON array as string
  badges          String?  // JSON array as string
  isVerified      Boolean  @default(false)
  isCreator       Boolean  @default(false)
  privacySettings Json?    // Privacy preferences
  socialStats     Json?    // Follower counts, engagement metrics
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_profiles")
}

model UserConnection {
  id          String           @id @default(cuid())
  followerId  String
  followingId String
  status      ConnectionStatus @default(FOLLOWING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_connections")
}

model Community {
  id          String          @id @default(cuid())
  name        String
  slug        String          @unique
  description String?
  image       String?
  category    CommunityCategory
  isGeoLocal  Boolean         @default(false)
  location    String?         // For geo-local communities
  rules       String?  // JSON array as string
  memberCount Int             @default(0)
  postCount   Int             @default(0)
  isPrivate   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  posts       SocialPost[]
  groups      Group[]

  @@map("communities")
}

model Group {
  id          String      @id @default(cuid())
  name        String
  description String?
  image       String?
  communityId String?
  creatorId   String
  type        GroupType   @default(PUBLIC)
  memberLimit Int?
  memberCount Int         @default(0)
  settings    Json?       // Group-specific settings
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  community Community? @relation(fields: [communityId], references: [id])
  creator   User       @relation("GroupCreator", fields: [creatorId], references: [id])
  members   GroupMember[]
  challenges GroupChallenge[]
  messages  GroupMessage[]

  @@map("groups")
}

model GroupMember {
  id       String    @id @default(cuid())
  groupId  String
  userId   String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model SocialPost {
  id          String       @id @default(cuid())
  userId      String
  communityId String?
  type        PostType     @default(TEXT)
  content     String?
  images      String?  // JSON array as string
  videos      String?  // JSON array as string
  metadata    Json?        // Additional post metadata
  visibility  PostVisibility @default(PUBLIC)
  likeCount   Int          @default(0)
  commentCount Int         @default(0)
  shareCount  Int          @default(0)
  isPromoted  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community?    @relation(fields: [communityId], references: [id])
  likes     PostLike[]
  comments  PostComment[]
  shares    PostShare[]

  @@map("social_posts")
}

model PostLike {
  id     String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  post SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model PostComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   SocialPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent PostComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies PostComment[] @relation("CommentReplies")

  @@map("post_comments")
}

model PostShare {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  platform  String?  // External platform if shared outside
  createdAt DateTime @default(now())

  post SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_shares")
}

model GroupChallenge {
  id          String            @id @default(cuid())
  groupId     String
  challengeId String
  isPrivate   Boolean           @default(false)
  leaderboard Json?             // Group-specific leaderboard
  createdAt   DateTime          @default(now())

  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([groupId, challengeId])
  @@map("group_challenges")
}

model Message {
  id         String      @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  type       MessageType @default(TEXT)
  isEncrypted Boolean    @default(false)
  readAt     DateTime?
  editedAt   DateTime?
  deletedAt  DateTime?
  metadata   Json?       // Additional message data
  createdAt  DateTime    @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model GroupMessage {
  id        String      @id @default(cuid())
  groupId   String
  senderId  String
  content   String
  type      MessageType @default(TEXT)
  editedAt  DateTime?
  deletedAt DateTime?
  metadata  Json?       // Additional message data
  createdAt DateTime    @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("group_messages")
}

model UserGeneratedContent {
  id           String      @id @default(cuid())
  userId       String
  experienceId String?
  challengeId  String?
  type         ContentType
  title        String?
  description  String?
  mediaUrls    String?  // JSON array as string
  tags         String?  // JSON array as string
  location     String?
  isModerated  Boolean     @default(false)
  moderationStatus ModerationStatus @default(PENDING)
  moderationNotes String?
  likeCount    Int         @default(0)
  viewCount    Int         @default(0)
  shareCount   Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_generated_content")
}

model StoryEntry {
  id          String   @id @default(cuid())
  userId      String
  challengeId String?
  title       String
  content     String
  mediaUrls   String?  // JSON array as string
  day         Int      // Day number in the story
  isAIAssisted Boolean @default(false)
  aiPrompt    String?  // If AI-assisted
  tags        String?  // JSON array as string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("story_entries")
}

model AIInteraction {
  id           String         @id @default(cuid())
  userId       String
  type         AIInteractionType
  input        String
  output       String
  context      Json?          // Additional context data
  feedback     String?        // User feedback on AI response
  rating       Int?           // 1-5 rating
  createdAt    DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_interactions")
}

model TrendingTopic {
  id          String   @id @default(cuid())
  topic       String   @unique
  category    String?
  mentionCount Int     @default(0)
  sentiment   Float?   // -1 to 1 sentiment score
  isPromoted  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trending_topics")
}

model SocialAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalPosts      Int      @default(0)
  totalComments   Int      @default(0)
  totalLikes      Int      @default(0)
  totalShares     Int      @default(0)
  activeUsers     Int      @default(0)
  newConnections  Int      @default(0)
  topTopics       String?  // JSON array as string
  engagementRate  Float    @default(0)
  metrics         Json?    // Additional social metrics
  createdAt       DateTime @default(now())

  @@map("social_analytics")
}

// Social Networking Enums
enum ConnectionStatus {
  FOLLOWING
  BLOCKED
  MUTED
}

enum CommunityCategory {
  FOODIES
  OUTDOORSY
  ARTISTIC
  WELLNESS
  TECH
  SPORTS
  TRAVEL
  EDUCATION
  GENERAL
}

enum GroupType {
  PUBLIC
  PRIVATE
  SECRET
}

enum GroupRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
  EXPERIENCE_SHARE
  CHALLENGE_UPDATE
  ACHIEVEMENT
  STORY
}

enum PostVisibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  LOCATION
  EXPERIENCE_INVITE
  CALENDAR_EVENT
}

enum ContentType {
  PHOTO
  VIDEO
  STORY
  REVIEW_MEDIA
  CHALLENGE_PROOF
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

enum AIInteractionType {
  RECOMMENDATION
  CONTENT_GENERATION
  SENTIMENT_ANALYSIS
  ENGAGEMENT_COACHING
  STORY_COMPOSITION
  TREND_ANALYSIS
}
